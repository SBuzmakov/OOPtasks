using System.Data;

namespace OOP6_Shop3
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Shop shop = new Shop();

            shop.Play();
        }
    }

    class Person
    {
        protected List<Product> Products = new List<Product>();

        public Person(string name, int balance)
        {
            Balance = balance;
            Name = name;
        }

        public int Balance { get; protected set; }
        public string Name { get; protected set; }

        public void ShowBalance()
        {
            Console.WriteLine($"{Name}: денежный баланс: {Balance}");
        }

        protected void RecalculateBalance(int price)
        {
            Balance += price;
        }
    }

    class Seller: Person
    {
        private Dictionary<string, int> _assortment = new Dictionary<string, int>() { { "хлеб", 50 },{"молоко", 100 },{"сыр", 150 },{"колбаса", 200 }, {"сырок б.ю. александров", 1000000} };

        public Seller(int balance) : base("продавец", balance) 
        {
            Products = FillProducts();
        }

        public void ShowInfo()
        {
            Console.Clear();

            ShowBalance();

            foreach (Product product in Products)
            {
                product.ShowInfo();
            }

            Console.ReadLine();
        }

        public bool TryGetProduct(int id, out Product product)
        {
            foreach (Product item in Products)
            {
                if (item.Id == id)
                {
                    product = item;
                    return true;
                }
            }

            Console.WriteLine("Товар не найден.");
            Console.ReadLine();
            product = null;
            return false;
        }

        public void SellProduct(int id, Product product)
        {
            RecalculateBalance(product.Price);

            Products.Remove(product);
        }

        private List<Product> FillProducts()
        {
            int id = 1;
            List<Product> products = new List<Product>();

            foreach ( KeyValuePair<string, int> assortment in _assortment)
            {
                Product product = new Product(id, assortment.Key, assortment.Value);
                products.Add(product);
                id++;
            }

            return products;
        }       
    }

    class Player: Person
    {
        public Player(int balance) : base("Игрок", balance) { }

        public void ShowInfo()
        {
            Console.Clear();

            ShowBalance();

            foreach (Product product in Products)
            {
                product.ShowName();
            }

            Console.ReadLine();
        }

        public void BuyItem(Product product)
        {
            RecalculateBalance(-product.Price);

            Products.Add(product);
        }

        public bool IsEnoughMoney(int price)
        {
            if (Balance >= price)
            {
                return true;
            }
            else
            {
                Console.WriteLine($"Не хватает {price - Balance} для покупки!");
                Console.ReadLine();
                return false;
            }
        }
    }

    class Product
    {
        public Product(int id, string name, int price)
        {
            Id = id;
            Name = name;
            Price = price;
        }

        public int Id { get; private set; }
        public string Name { get; private set; }
        public int Price { get; private set;}

        public void ShowInfo()
        {
            Console.WriteLine($"{Id} {Name} {Price}");
        }

        public void ShowName()
        {
            Console.WriteLine(Name);
        }
    }

    class Shop
    {
        private Player _player = new Player(1000);
        private Seller _seller = new Seller(0);
        private bool _isWork = true;
        private const ConsoleKey CommandExit = ConsoleKey.D0;

        public void Play()
        {
            while (_isWork)
            {
                Manage();
            }
        }

        private void Manage()
        {
            const ConsoleKey CommandShowItems = ConsoleKey.D1;
            const ConsoleKey CommandShowInventory = ConsoleKey.D2;
            const ConsoleKey FinishWork = ConsoleKey.Escape;

            Console.Clear();

            Console.WriteLine($"введите команду: \n{CommandShowItems} - показать товары магазина\n{CommandShowInventory} -показать ваш инвентарь\n{FinishWork} - выход");

            ConsoleKeyInfo charKey = Console.ReadKey(true);

            switch (charKey.Key)
            {
                case CommandShowInventory:
                    _player.ShowInfo();
                    break;

                case CommandShowItems:
                    DoShopping();
                    break;

                case FinishWork:
                    _isWork = false;
                    break;

                default:
                    break;
            }
        }
        private void DoShopping()
        {
            ConsoleKey CommandExit = ConsoleKey.D0;

            Console.Clear();

            _player.ShowBalance();

            _seller.ShowInfo();

            Console.WriteLine($"{CommandExit} - выйти из магазина без покупок\n");

            int userInput = UserUtils.GetUserInputInt("введите номер товара для покупки: ");

            MakeDeal(userInput);
        }

        private void MakeDeal(int userInput)
        {
            if (userInput == 0)
                return;

            Product product = null;

            if (_seller.TryGetProduct(userInput, out product) && _player.IsEnoughMoney(product.Price))
            {
                _seller.SellProduct(userInput, product);

                _player.BuyItem(product);
            }
        }
    }

    class UserUtils
    {
        public static int GetUserInputInt(string text)
        {
            bool isNumber = false;
            int parsedNumber = 0;

            while (isNumber == false)
            {
                Console.Write(text);
                string userInput = Console.ReadLine();
                isNumber = int.TryParse(userInput, out parsedNumber);

                if (isNumber == false)
                {
                    Console.WriteLine("Ошибка! Введите число");
                    Console.ReadKey(true);
                }
            }

            return parsedNumber;
        }
    }
}
