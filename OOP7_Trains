namespace OOO7_TRAIN
{
    internal class Program
    {
        static void Main(string[] args)
        {
            RailwayStation railwayStation = new RailwayStation();

            railwayStation.Work();
        }
    }

    class Carriage
    {
        public int SeatsAmount { get; private set; } = 54;
    }

    class Train
    {
        private List<Carriage> _carriages;
        
        public Train(List<Carriage> carriages, Direction direction, int passengersAmount, int number)
        {
            Direction = direction;
            PassengersAmount = passengersAmount;
            Number = number;
            _carriages = carriages;
        }

        public Direction Direction { get; private set; }
        public int PassengersAmount {  get; private set; }
        public int Number { get; private set; }
        public bool IsSent { get; private set; } = false;

        public void ShowInfo()
        {
            if (IsSent)
            {
                Console.ForegroundColor = ConsoleColor.Green;
            }
            else
            {
                Console.ForegroundColor= ConsoleColor.Yellow;
            }

            Console.WriteLine($"{Number} {Direction.DepartureCity} - {Direction.ArrivingCity}. {_carriages.Count} вагонов / {PassengersAmount} пассажиров");

            Console.ResetColor();
        }

        public void SendTrain()
        {
            IsSent = true;
        }
    }

    class Direction
    {
        public Direction(string departureCity, string arrivingCity)
        {
            DepartureCity = departureCity;
            ArrivingCity = arrivingCity;
        }

        public string DepartureCity { get; private set; }
        public string ArrivingCity { get; private set; }
    }

    class RailwayStation
    {
        private int _trainNumber = 0;
        private List<Train> _trains = new List<Train>();
        private List<string> _cities;

        public RailwayStation()
        {
            _cities = new List<string>() { "Санкт-Петербург", "Москва", "Сочи", "Казань", "Мурманск", "Великий Новгрод" };
        }

        public void Work()
        {
            const ConsoleKey CommandExit = ConsoleKey.Escape;
            bool isWork = true;

            while (isWork)
            {
                Console.Clear();

                ShowTrains();

                Console.WriteLine($"Для завершения работы нажмите {CommandExit}\nДля продолжения работы нажмите любую другую клавишу.") ;

                ConsoleKeyInfo key = Console.ReadKey();

                if(key.Key != CommandExit) 
                {
                    Console.Clear();
                    Console.SetCursorPosition(0, 0);
                    Console.WriteLine("Сформировать поезд:");
                    Console.ReadKey();

                    Train train = FormTrain();

                    _trains.Add(train);

                    Console.Clear();

                    ShowTrains();

                    Console.SetCursorPosition(0, 0);
                    Console.WriteLine("Отправить поезд:");
                    Console.ReadKey();

                    train.SendTrain();
                }
                else
                {
                    isWork = false;
                }              
            }

            Console.Clear();
            Console.WriteLine("\n\t Pабота завершена");
            Console.ReadKey();
        }

        private void ChooseCities(out string departureCity, out string arrivingCity)
        {
            departureCity = GetCity("Введите город отправления:");

            _cities.Remove(departureCity);

            Console.Clear();

            arrivingCity = GetCity("Введите город прибытия:");

            Console.Clear();
        }

        private void ShowCities()
        {
            for (int i = 0; i < _cities.Count; i++)
            {
                Console.WriteLine($"{i} {_cities[i]}");
            }
        }

        private bool isCityExist(int userInput)
        {
            return userInput >= 0 && userInput <= _cities.Count - 1;
        }

        private string GetCity(string text)
        {
            ShowCities();

            int userInput = -1;

            while (isCityExist(userInput) == false)
            {
                userInput = UserUtils.GetUserInputInt(text);
            }

            return _cities[userInput];
        }

        private void ShowTrains()
        {
            int boardPositionX = 60;
            Console.SetCursorPosition(boardPositionX, 0);

            Console.WriteLine("Список поездов:");

            for (int i = 0; i < _trains.Count; i++)
            {
                Console.SetCursorPosition(boardPositionX, i + 1);

                _trains[i].ShowInfo();
            }
        }

        private Train FormTrain()
        {
            string departureCity;
            string arrivingCity;
            int passengersAmount;

            ChooseCities(out departureCity, out arrivingCity);

            Direction direction = new Direction(departureCity, arrivingCity);

            passengersAmount = GetPassengers();

            List<Carriage> carriages = GetCarriages(passengersAmount);

            Train train = new Train(carriages, direction, passengersAmount, _trainNumber);

            _trainNumber++;

            return train;
        }

        private int GetPassengers()
        {
            return UserUtils.GenerateRandomNumber(0, int.MaxValue);
        }

        private List<Carriage> GetCarriages(int passengers)
        {
            List<Carriage> carriages = new List<Carriage>();
            int passengersLeft = passengers;

            while (passengersLeft > 0)
            {
                Carriage carriage = new Carriage();

                carriages.Add(carriage);

                passengersLeft -= carriage.SeatsAmount;
            }

            return carriages;
        }
    }

    class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomNumber(int min, int max)
        {
            return s_random.Next(min, max);
        }

        public static int GetUserInputInt(string text)
        {
            bool isNumber = false;
            int parsedNumber = 0;

            while (isNumber == false)
            {
                Console.Write(text);
                string userInput = Console.ReadLine();
                isNumber = int.TryParse(userInput, out parsedNumber);

                if (isNumber == false)
                {
                    Console.WriteLine("Ошибка! Введите число");
                    Console.ReadKey(true);
                }
            }

            return parsedNumber;
        }
    }
}
