using System.Numerics;

namespace OOP3PlayersDatabase
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string AddPlayerCommand = "1";
            const string RemovePlayerCommand = "2";
            const string ChangeBanStatusCommand = "3";
            const string ExitCommand = "4";

            bool isWork = true;

            Database database = new Database();

            while (isWork)
            {
                database.ShowBase();

                Console.SetCursorPosition(0, 0);
                Console.WriteLine($"Ведите номер команды:" +
                    $"\n\t{AddPlayerCommand} - добавить игрока." +
                    $"\n\t{RemovePlayerCommand} - удалить игрока по ID." +
                    $"\n\t{ChangeBanStatusCommand} - изменить статус бана игрока по ID." +
                    $"\n\t{ExitCommand} - выход из программы.");

                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case AddPlayerCommand:
                        database.AddPlayer();
                    break;

                    case RemovePlayerCommand:
                        database.RemovePlayer();
                    break;

                    case ChangeBanStatusCommand:
                        database.ChangeBanStatus();
                    break;

                    case ExitCommand:
                        isWork = false;
                        break;

                    default:
                        Console.WriteLine("Некорректная команда");
                        break;
                }

                Console.ReadLine();
                Console.Clear();
            }
        }
    }

    class Player
    {
        public Player(string nickname, int id, int level = 1, bool isBanned = false)
        {
            Nickname = nickname;
            ID = id;
            Level = level;
            IsBanned = isBanned;
        }

        public string Nickname { get; private set; }
        public int ID { get; set; }
        public int Level { get; private set; }
        public bool IsBanned { get; private set; }

        public void ShowInfo()
        {
            Console.Write($"{Nickname} / id {ID} / level {Level} / ");

            ShowBanStatus();
        }

        public bool Unban()
        {
            IsBanned = false;           
            return IsBanned;
        }

        public bool Ban()
        {
            IsBanned = true;
            return IsBanned;
        }

        private void ShowBanStatus()
        {
            if (IsBanned) 
            {
                Console.WriteLine("Banned");
            }
            else
            {
                Console.WriteLine("Can Play");
            }
        }
    }

    class Database
    {
        private int _currentMaxID = 0;
        private List<Player> _playersList = new List<Player>();

        public void ShowBase()
        {
            int positionX = 60;
            Console.SetCursorPosition(positionX, 0);
            Console.WriteLine("База данных игроков:");

            for (int i = 0; i < _playersList.Count; i++)
            {
                Console.SetCursorPosition(positionX, i + 1);

                _playersList[i].ShowInfo();
            }
        }

        public void AddPlayer()
        {
            Console.WriteLine("Добавить игрока.");
            string inputNickname = GetUserInput("Введите ник нового игрока: ");

            if (inputNickname != "")
            {
                Player player = new Player(inputNickname, _currentMaxID);

                _playersList.Add(player);

                _currentMaxID = GetNewID();
                
                Console.WriteLine("Добавлен игрок:\n");

                player.ShowInfo();
            }
            else
            {
                Console.WriteLine("некорректный ник!");
            }
        }

        public void RemovePlayer() 
        {
            int playerIndex = 0;

            Console.WriteLine("Удалить игрока по ID.");

            bool isPlayerIndexFound = FindPlayerIndex(out playerIndex);

            if (isPlayerIndexFound)
            {
                Console.WriteLine("Удаляется игрок:");

                _playersList[playerIndex].ShowInfo();

                _playersList.RemoveAt(playerIndex);
            }                                       
        }

        public void ChangeBanStatus()
        {
            int playerIndex = 0;

            Console.WriteLine("Изменить статус бана игрока по ID.");

            bool isPlayerIndexFound = FindPlayerIndex(out playerIndex);
           
            if (isPlayerIndexFound)
            {
                if (_playersList[playerIndex].IsBanned)
                {
                    _playersList[playerIndex].Unban();
                }
                else
                {
                    _playersList[playerIndex].Ban();
                }

                _playersList[playerIndex].ShowInfo();
            }                          
        }

        private int GetNewID()
        {
            _currentMaxID++;
            return _currentMaxID;
        }

        private int GetID()
        {
            bool isNumber = false;
            int parsedNumber = 0;

            while (isNumber == false)
            {
                string userInput = GetUserInput("Введите ID: ");

                isNumber = int.TryParse(userInput, out parsedNumber);
            }

            return parsedNumber;
        }

        private bool FindPlayerIndex(out int playerIndex)
        {
            playerIndex = 0;
            bool indexIsFound = false;

            int requestedPlayerID = GetID();

            for (int i = 0; i < _playersList.Count; i++)
            {
                if (_playersList[i].ID == requestedPlayerID)
                {
                    playerIndex = i;
                    indexIsFound = true;
                    return indexIsFound;
                }
            }

            if (indexIsFound == false)
            {
                Console.WriteLine("игрок под этим ID отсутствует.");
            }

            return false;
        }

        private string GetUserInput(string inputRequest)
        {
            Console.Write(inputRequest);
            string userInput = Console.ReadLine();
            return userInput;
        }
    }
}
