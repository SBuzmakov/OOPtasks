using System.Numerics;
using System.Reflection.Metadata.Ecma335;

namespace OOP4_CardDeck
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Dealer dealer = new Dealer();

            dealer.Play();
        }  
    }

    class Dealer
    {
        private Deck  _deck = new Deck();
        private Player _player = new Player();
        private bool _isWork = true;

        public void Play()
        {
            while (_isWork)
            {
                _deck.Print();

                _player.ShowHand();

                ManageMenu();

                Console.Clear();
            }

            _player.ShowHand();
        }

        private void PassCard()
        {
            if(_deck.IsEmpty())
            {
                _isWork = false;
            }
            else
            {
                Card card = _deck.TakeCard();

                _player.AddCardToHand(card);              
            }
        }

        private void ManageMenu()
        {
            const ConsoleKey CommandTakeCard = ConsoleKey.Y;
            const ConsoleKey CommandPass = ConsoleKey.N;
            const ConsoleKey CommandMixDeck = ConsoleKey.M;

            Console.WriteLine($"\n\nВытянуть карту из колоды?\t{CommandTakeCard} - вытянуть карту, {CommandPass} - пас, {CommandMixDeck} - перемешать колоду.");

            ConsoleKeyInfo charKey = Console.ReadKey(true);

            switch (charKey.Key)
            {
                case CommandTakeCard:
                    PassCard();
                    break;

                case CommandPass:
                    _isWork = false;
                    break;

                case CommandMixDeck:
                    _deck.Mix();
                    break;

                default:
                    Console.WriteLine("Ход пропущен");
                    break;
            }
        }
    }

    class Player
    {
        private List<Card> _cardsHand = new List<Card>();

        public void ShowHand()
        {
            Console.Write($"\n взятые карты:\t");

            for (int i = 0; i < _cardsHand.Count; i++)
            {
                _cardsHand[i].Print();
            }
        }

        public void AddCardToHand(Card card)
        {
            if(card == null)
            {
                return;
            }
            else
            {
                _cardsHand.Add(card);
            }
        }
    }

    class Deck
    {
        private List<Card> _cards;

        public Deck()
        {
            _cards = Create();
        }

        public void Mix()
        {
            int cardsCount = _cards.Count;

            for (int i = 0; i < cardsCount; i++)
            {
                int randomIndex = UserUtils.GenerateRandomNumber(0, _cards.Count);

                Card temporaryCard = _cards[i];

                _cards[i] = _cards[randomIndex];

                _cards[randomIndex] = temporaryCard;
            }
        }

        public void Print()
        {
            for (int i = 0; i < _cards.Count; i++)
            {
                _cards[i].Print();
            }
        }

        public Card TakeCard()
        {
            if (IsEmpty())
            {
                return null;
            }
            else
            {
                Card card = _cards[0];

                RemoveCard(card);

                return card;
            }
        }

        public bool IsEmpty()
        {
            if (_cards.Count > 0)
            {
                return false;
            }
            else
            {
                Console.WriteLine("Карты в колоде закончились!");

                Console.ReadKey(true);

                return true;
            }
        }

        private void RemoveCard(Card card)
        {
            _cards.Remove(card);
        }

        private List<Card> Create()
        {
            var cards = new List<Card>();

            var cardNames = new string[] { "6", "7", "8", "9", "10", "J", "Q", "K", "A" };

            var suitsColors = new Dictionary<char, ConsoleColor>()
            {
                { '♥', ConsoleColor.DarkRed },
                { '♦', ConsoleColor.DarkRed },
                { '♠', ConsoleColor.DarkGray },
                { '♣', ConsoleColor.DarkGray },
            };

            foreach  (KeyValuePair<char, ConsoleColor> suits in suitsColors)
            {
                for (int i = 0; i < cardNames.Length; i++)
                {
                    cards.Add(new Card(cardNames[i], suits.Key, suits.Value));
                }
            }

            return cards;
        }
    }

    class Card
    {
        public Card(string cardSymbol, char cardSuit, ConsoleColor cardColor)
        {
            Symbol = cardSymbol;
            Suit = cardSuit;
            Color = cardColor;
        }

        public string Symbol { get; private set; }
        public char Suit { get; private set; }
        public ConsoleColor Color { get; private set; }

        public void Print()
        {
            Console.ForegroundColor = Color;
            Console.Write($"{Symbol}{Suit}  ");
            Console.ResetColor();
        }
    }

    class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomNumber(int min, int max)
        {
            return s_random.Next(min, max);
        }
    }
}
