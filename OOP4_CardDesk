using System.Numerics;

namespace OOP4_CardDeck
{
    internal class Program
    {
        static void Main(string[] args)
        {
            bool isWork = true;

            string name = SetName();

            while (isWork)
            {
                Player player = new Player(name);
                Player enemy = new Player("Оппонент");
                Game21 game = new Game21(player, enemy);

                Console.WriteLine("Наберите не больше 21 очка. Колода 36 карт. J - два, Q - три, К - четыре, А - одиннадцать очков.");

                game.Play();

                isWork = ControlMenu();

                Console.Clear();
            }

            Console.WriteLine("good luck!");
            Console.ReadKey(true);
        }

        static bool ControlMenu()
        {
            const ConsoleKey PressEscape = ConsoleKey.Escape;

            Console.WriteLine($"\n\nВыйти из игры?\n\n\tклавиша {PressEscape} - выйти из игры. \n\nДля продолжения - остальные клавиши.");

            ConsoleKeyInfo charKey = Console.ReadKey(true);

            switch (charKey.Key)
            {
                case PressEscape:
                    return false;
                    break;
                default:
                    return true;
                    break;
            }
        }

        static string SetName()
        {
            string name = "";

            while (name == "")
            {
                Console.Write("Введите ваше имя: ");
                name = Console.ReadLine();
            }

            return name;
        }

        class Game21
        {
            private Dictionary<string, int> _game21cardsValues = new Dictionary<string, int>()
            {
                { "_6", 6 },
                { "_7", 7 },
                { "_8", 8 },
                { "_9", 9 },
                { "_10", 10 },
                { "_J", 2 },
                { "_Q", 3 },
                { "_K", 4 },
                { "_A", 11 }
            };
            private Player _player;
            private int _playerScore = 0;
            private Player _enemy;
            private int _enemyScore = 0;
            private Deck _cardDeck = new Deck();
            private int _scoreLimit = 21;
            private int _dangerScore = 11;
            private int _randomRange = 2;
            private bool _isPlaying = true;           

            public Game21(Player player, Player enemy)
            {
                _enemy = enemy;
                _player = player;
            }

            public void Play()
            {
                while (_isPlaying)
                {
                    _player.ShowHand();

                    ControlPlaying();

                    DoTurn(_enemy);

                    _playerScore = CountUpScore(_player, _playerScore);

                    _enemyScore = CountUpScore(_enemy, _enemyScore);

                    CheckScoreOverdone(_player, _playerScore);

                    CheckScoreOverdone(_enemy, _enemyScore);

                    GetResult();

                    Console.Clear();
                }                              
            }

            private void DoTurn()
            {
                if (_player.CanTakeCard)
                {
                    Card card = _cardDeck.GetRandomCard();

                    _cardDeck.RemoveCard(card);

                    _player.TakeCardToHand(card);

                    Console.WriteLine("Вы взяли карту.");
                    Console.ReadKey(true);
                }
            }

            private void DoTurn(Player enemy)
            {
                Random random = new Random();
                int enemyDecision = random.Next(0, _randomRange);

                if(_enemy.CanTakeCard && _enemyScore >= _dangerScore && enemyDecision == 0 || _enemy.CanTakeCard && _enemyScore == _scoreLimit)
                {
                    _enemy.BanTurn();
                }               
                else if(_enemy.CanTakeCard)
                {
                    Card card = _cardDeck.GetRandomCard();

                    _cardDeck.RemoveCard(card);

                    _enemy.TakeCardToHand(card);

                    Console.WriteLine("Оппонент взял карту.");
                    Console.ReadKey(true);
                }
            }

            private void ControlPlaying()
            {
                const ConsoleKey PressY = ConsoleKey.Y;
                const ConsoleKey PressN = ConsoleKey.N;
                const ConsoleKey PressE = ConsoleKey.E;

                Console.WriteLine($"\n\nВытянуть карту из колоды?\t{PressY} - вытянуть карту, {PressN} - пас, {PressE} - выйти из игры.");

                ConsoleKeyInfo charKey = Console.ReadKey(true);

                switch (charKey.Key)
                {
                    case PressE:
                        _isPlaying = false;
                        break;

                    case PressY:
                        DoTurn();
                        break;

                    case PressN:
                        _player.BanTurn();
                        break;
                    default:
                        Console.WriteLine("Ход пропущен");
                        break;
                }                
            }

            private void CheckScoreOverdone(Player player, int score)
            {
                if (score > _scoreLimit)
                {
                    player.BanTurn();

                    player.SetOnOverdoneStatus();
                }
            }

            private void PrintScore(Player player, int score)
            {                
                player.ShowHand();

                Console.WriteLine($"Очки {player.Name}: {score}");               
            }

            private void GetResult()
            {
                if(_player.CanTakeCard == false && _enemy.CanTakeCard == false)
                {
                    _isPlaying = false;

                    Console.Clear();

                    PrintScore(_player, _playerScore);

                    PrintScore(_enemy, _enemyScore);

                    if(_player.IsScoreOverdone && _enemy.IsScoreOverdone)
                    {
                        Console.WriteLine("Оба проиграли!");
                    }                   
                    else if(!_player.IsScoreOverdone && !_enemy.IsScoreOverdone && _playerScore > _enemyScore)
                    {
                        Console.WriteLine($"Победитель - {_player.Name}!");
                    }
                    else if(!_player.IsScoreOverdone && !_enemy.IsScoreOverdone && _playerScore < _enemyScore)
                    {
                        Console.WriteLine($"Победитель - {_enemy.Name}!");
                    }
                    else if (!_player.IsScoreOverdone && _enemy.IsScoreOverdone)
                    {
                        Console.WriteLine($"Победитель - {_player.Name}!");
                    }
                    else if (_player.IsScoreOverdone && !_enemy.IsScoreOverdone)
                    {
                        Console.WriteLine($"Победитель - {_enemy.Name}!");
                    }
                    else if (!_player.IsScoreOverdone && !_enemy.IsScoreOverdone && _playerScore == _enemyScore)
                    {
                        Console.WriteLine($"Победитель - дружба. Ничья!");
                    }

                    Console.ReadKey(true);
                }
            }

            private int CountUpScore(Player player, int score)
            {
                List<Card> hand = player.GetHand();

                score = 0;

                for (int i = 0; i < hand.Count; i++)
                {
                    score += _game21cardsValues[hand[i].Symbol];
                }

                return score;
            }
        }

        class Player
        {
            private List<Card> _cardsHand = new List<Card>();

            public Player(string name)
            {
                Name = name;
            }

            public bool IsScoreOverdone { get; private set; } = false;
            public bool CanTakeCard {  get; private set; } = true;
            public string Name { get; private set; }

            public void SetOnOverdoneStatus()
            {
                IsScoreOverdone = true;
            }

            public void BanTurn()
            {
                if (CanTakeCard)
                {
                CanTakeCard = false;
                Console.WriteLine($"{Name} завершил партию.");
                Console.ReadKey(true);
                }
            }

            public void ShowHand()
            {
                Console.Write($"\nKарты {Name}:\t");

                for (int i = 0; i < _cardsHand.Count; i++)
                {
                    _cardsHand[i].Print();
                }
            }
            
            public void TakeCardToHand(Card card)
            {
                _cardsHand.Add(card);
            }

            public List<Card> GetHand()
            {
                return _cardsHand;
            }
        }

        class Deck
        {
            private List<Card> _cards = Fill();
            
            public void Show()
            {
                for (int i = 0; i < _cards.Count; i++)
                {
                    _cards[i].Print();
                }
            }

            public void RemoveCard(Card card)
            {
                _cards.Remove(card);               
            }

            public Card GetRandomCard()
            {
                int randomIndex = GetRandomIndex();

                Card card = _cards[randomIndex];

                return card;                
            }

            private int GetRandomIndex()
            {
                Random random = new Random();
                int index = random.Next(0, _cards.Count);
                return index;
            }

            private static List<Card> Fill()
            {
                List<Card> cards = new List<Card>();

                string[] cardSymbols = Enum.GetNames(typeof(CardsSymbols));

                for (int i = 0; i < cardSymbols.Length; i++)
                {
                    cards.Add(new Card(cardSymbols[i], '♠',ConsoleColor.DarkGray));

                    cards.Add(new Card(cardSymbols[i], '♣', ConsoleColor.DarkGray));

                    cards.Add(new Card(cardSymbols[i], '♥', ConsoleColor.Red));

                    cards.Add(new Card(cardSymbols[i], '♦', ConsoleColor.Red));
                }

                return cards;
            }
        }

        class Card
        {
            public Card(string cardSymbol, char cardSuit, ConsoleColor cardColor)
            {
                Symbol = cardSymbol;
                Suit = cardSuit;
                Color = cardColor;
            }

            public string Symbol { get; private set; }
            public char Suit { get; private set; }
            public ConsoleColor Color { get; private set; }

            public void Print()
            {
                Console.ForegroundColor = Color;
                Console.Write($"{Symbol}{Suit}  ");
                Console.ResetColor();
            }
        }

        enum CardsSymbols
        {
            _6,
            _7,
            _8,
            _9,
            _10,
            _J,
            _Q,
            _K,
            _A
        }
    }
}
