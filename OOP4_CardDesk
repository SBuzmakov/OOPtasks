using System.Numerics;
using System.Reflection.Metadata.Ecma335;

namespace OOP4_CardDeck
{
    internal class Program
    {
        static void Main(string[] args)
        {
            bool isWork = true;

            while (isWork)
            {
                Player player = new Player();
                Player enemy = new Player("Оппонент");
                Game21 game = new Game21(player, enemy);

                game.Play();

                isWork = CheckExitMenu();

                Console.Clear();
            }

            Console.WriteLine("good luck!");
            Console.ReadKey(true);
        }

        static bool CheckExitMenu()
        {
            const ConsoleKey PressEscape = ConsoleKey.Escape;

            Console.WriteLine($"\n\nВыйти из игры?\n\n\tклавиша {PressEscape} - выйти из игры. \n\nДля продолжения - остальные клавиши.");

            ConsoleKeyInfo charKey = Console.ReadKey(true);

            bool isESCPressed = charKey.Key == PressEscape ? false: true;
            
            return isESCPressed;
        }      
    }

    class Game21
    {
        private Dictionary<string, int> _cardsValues;
        private Player _player;
        private Player _enemy;
        private Deck36Cards _deck;
        private int _scoreLimit = 21;
        private int _dangerScore = 11;
        private int _randomRange = 2;
        private bool _isPlaying = true;

        public Game21(Player player, Player enemy)
        {
            _enemy = enemy;
            _player = player;

            _deck = new Deck36Cards();

            _cardsValues = new Dictionary<string, int>()
            {
                { "6", 6 },
                { "7", 7 },
                { "8", 8 },
                { "9", 9 },
                { "10", 10 },
                { "J", 2 },
                { "Q", 3 },
                { "K", 4 },
                { "A", 11 }
            };
        }

        public void Play()
        {
            PrintRules();

            _deck.Print();

            _deck.Mix();

            Console.ReadKey();

            Console.Clear();

            while (_isPlaying)
            {
                _player.ShowHand();

                ControlPlaying();

                DoEnemyTurn();

                CalculateScore(_player);

                CalculateScore(_enemy);

                SwitchScoreOverdone(_player);

                SwitchScoreOverdone(_enemy);

                GetResult();

                Console.Clear();
            }
        }

        private void PrintRules()
        {
            Console.WriteLine($"Наберите не больше {_scoreLimit} очка. Колода {_deck.Cards.Count} карт. \nКоличество очков за карты: \n");

            foreach (KeyValuePair<string, int> card in _cardsValues)
            {
                Console.WriteLine($"карта {card.Key} - {card.Value} очков");
            }
        }

        private void DoTurn()
        {
            if (_player.CanTakeCard)
            {
                _player.TakeCardToHand(_deck.Cards[0]);

                _deck.Cards.RemoveAt(0);

                Console.WriteLine("Вы взяли карту.");
                Console.ReadKey(true);
            }
        }

        private void DoEnemyTurn()
        {
            int enemyDecision = UserUtils.GenerateRandomNumber(0, _randomRange);

            if (_enemy.CanTakeCard && _enemy.Score >= _dangerScore && enemyDecision == 0 || _enemy.CanTakeCard && _enemy.Score == _scoreLimit)
            {
                _enemy.BanTurn();
            }
            else if (_enemy.CanTakeCard)
            {
                _enemy.TakeCardToHand(_deck.Cards[0]);

                _deck.Cards.RemoveAt(0);

                Console.WriteLine("Оппонент взял карту.");
                Console.ReadKey(true);
            }
        }

        private void ControlPlaying()
        {
            const ConsoleKey PressY = ConsoleKey.Y;
            const ConsoleKey PressN = ConsoleKey.N;
            const ConsoleKey PressE = ConsoleKey.E;

            Console.WriteLine($"\n\nВытянуть карту из колоды?\t{PressY} - вытянуть карту, {PressN} - пас, {PressE} - выйти из игры.");

            ConsoleKeyInfo charKey = Console.ReadKey(true);

            switch (charKey.Key)
            {
                case PressE:
                    _isPlaying = false;
                    break;

                case PressY:
                    DoTurn();
                    break;

                case PressN:
                    _player.BanTurn();
                    break;

                default:
                    Console.WriteLine("Ход пропущен");
                    break;
            }
        }

        private void SwitchScoreOverdone(Player player)
        {
            if (player.Score > _scoreLimit)
            {
                player.BanTurn();

                player.TurnOnOverdoneStatus();
            }
        }

        private void PrintScore(Player player)
        {
            player.ShowHand();

            Console.WriteLine($"Очки {player.Name}: {player.Score}");
        }

        private void GetResult()
        {
            if (_player.CanTakeCard == false && _enemy.CanTakeCard == false)
            {
                _isPlaying = false;

                Console.Clear();

                PrintScore(_player);

                PrintScore(_enemy);

                if (_player.IsScoreOverdone && _enemy.IsScoreOverdone)
                {
                    Console.WriteLine("Оба проиграли!");
                }
                else if (_player.IsScoreOverdone == false && _enemy.IsScoreOverdone == false  && _player.Score > _enemy.Score)
                {
                    Console.WriteLine($"Победитель - {_player.Name}!");
                }
                else if (_player.IsScoreOverdone == false && _enemy.IsScoreOverdone == false && _player.Score < _enemy.Score)
                {
                    Console.WriteLine($"Победитель - {_enemy.Name}!");
                }
                else if (_player.IsScoreOverdone == false && _enemy.IsScoreOverdone)
                {
                    Console.WriteLine($"Победитель - {_player.Name}!");
                }
                else if (_player.IsScoreOverdone && _enemy.IsScoreOverdone == false)
                {
                    Console.WriteLine($"Победитель - {_enemy.Name}!");
                }
                else if (_player.IsScoreOverdone == false && _enemy.IsScoreOverdone && _player.Score == _enemy.Score)
                {
                    Console.WriteLine($"Победитель - дружба. Ничья!");
                }

                Console.ReadKey(true);
            }
        }

        private void CalculateScore(Player player)
        {
            List<Card> hand = player.GetHand();

            int score = 0;

            for (int i = 0; i < hand.Count; i++)
            {
                score += _cardsValues[hand[i].Symbol];
            }

            player.SetScore(score);
        }
    }

    class Player
    {
        private List<Card> _cardsHand = new List<Card>();

        public Player()
        {
            Name = EnterName();
        }

        public Player(string name)
        {
            Name = name;
        }

        public int Score { get; private set; } = 0;
        public bool IsScoreOverdone { get; private set; } = false;
        public bool CanTakeCard { get; private set; } = true;
        public string Name { get; private set; }

        public void SetScore(int score)
        {
            Score = score;
        }

        public void TurnOnOverdoneStatus()
        {
            IsScoreOverdone = true;
        }

        public void BanTurn()
        {
            if (CanTakeCard)
            {
                CanTakeCard = false;
                Console.WriteLine($"{Name} завершил партию.");
                Console.ReadKey(true);
            }
        }

        public void ShowHand()
        {
            Console.Write($"\nKарты {Name}:\t");

            for (int i = 0; i < _cardsHand.Count; i++)
            {
                _cardsHand[i].Print();
            }
        }

        public void TakeCardToHand(Card card)
        {
            _cardsHand.Add(card);
        }

        public List<Card> GetHand()
        {
            List<Card> hand = _cardsHand.ToList();

            return hand;
        }

        private string EnterName()
        {
            string name = "";

            while (name == "")
            {
                Console.Write("Введите ваше имя: ");
                name = Console.ReadLine();
            }

            return name;
        }
    }

    class Deck36Cards
    {
        private string[] _cardNames;
        private Dictionary<char, ConsoleColor> _suitsColors;

        public Deck36Cards()
        {
            _cardNames = new string[] { "6", "7", "8", "9", "10", "J", "Q", "K", "A" };

            _suitsColors = new Dictionary<char, ConsoleColor>()
            {
                { '♥', ConsoleColor.DarkRed },
                { '♦', ConsoleColor.DarkRed },
                { '♠', ConsoleColor.DarkGray },
                { '♣', ConsoleColor.DarkGray },
            };

            Cards = Fill();
        }

        public List<Card> Cards { get; private set; }

        public void Mix()
        {
            int cardsCount = Cards.Count;

            for (int i = 0; i < cardsCount; i++)
            {
                int randomIndex = UserUtils.GenerateRandomNumber(0, Cards.Count);

                Card temporaryCard = Cards[i];

                Cards[i] = Cards[randomIndex];

                Cards[randomIndex] = temporaryCard;
            }
        }

        public void Print()
        {
            for (int i = 0; i < Cards.Count; i++)
            {
                Cards[i].Print();
            }
        }

        private List<Card> Fill()
        {
            List<Card> cards = new List<Card>();

            foreach  (KeyValuePair<char, ConsoleColor> suits in _suitsColors)
            {
                for (int i = 0; i < _cardNames.Length; i++)
                {
                    cards.Add(new Card(_cardNames[i], suits.Key, suits.Value));
                }
            }

            return cards;
        }
    }

    class Card
    {
        public Card(string cardSymbol, char cardSuit, ConsoleColor cardColor)
        {
            Symbol = cardSymbol;
            Suit = cardSuit;
            Color = cardColor;
        }

        public string Symbol { get; private set; }
        public char Suit { get; private set; }
        public ConsoleColor Color { get; private set; }

        public void Print()
        {
            Console.ForegroundColor = Color;
            Console.Write($"{Symbol}{Suit}  ");
            Console.ResetColor();
        }
    }

    class UserUtils
    {
        private static Random _random = new Random();

        public static int GenerateRandomNumber(int min, int max)
        {
            int number = _random.Next(min, max);
            return number;
        }
    }
}
