using System.Runtime.CompilerServices;
using static System.Net.Mime.MediaTypeNames;

namespace OOP8_Gladiators
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();

            arena.BeginDuel();
        }
    }

    class Arena
    {
        private List<Gladiator> _roster;

        public Arena()
        {
            _roster = new List<Gladiator> { new RandomDoubleDamager("Вася"), new StableDoubleDamager("Петя"), new Monk("Сережа"), new Sorcerer("Коля"), new Dodger("Венцеслав") };
        }

        public void BeginDuel()
        {                       
            ChooseGladiators(out Gladiator gladiator1, out Gladiator gladiator2);

            Console.Clear();

            Fight(gladiator1, gladiator2);
            
            Console.ReadKey();
        }

        private void Fight(Gladiator gladiator1, Gladiator gladiator2)
        {
            int fightStep = 1;

            while (gladiator1.Health > 0 && gladiator2.Health > 0)
            {
                gladiator1.ShowStats();

                gladiator2.ShowStats();

                int damage;

                DoTurn(gladiator1, gladiator2, out damage, fightStep);

                DoTurn(gladiator2, gladiator1, out damage, fightStep);

                Console.Clear();

                fightStep++;
            }

            Console.Clear();

            gladiator1.ShowStats();

            gladiator2.ShowStats();

            if(gladiator1.Health > 0)
            {
                Console.WriteLine($"Победитель гладиатор 1 {gladiator1.Name}");
            }
            else
            {
                Console.WriteLine($"Победитель гладиатор 2 {gladiator2.Name}");
            }
        }

        public void ShowRoster()
        {
            for (int i = 0; i < _roster.Count; i++)
            {
                Console.WriteLine($"{i} {_roster[i].Name} : {_roster[i].Description}");
            }
        }

        private void DoTurn(Gladiator attackingGladiator, Gladiator attackedGladiator, out int damage, int fightStep)
        {
            Console.WriteLine($"атака гладиатора {attackingGladiator.Name}:") ;
            Console.ReadKey();

            attackingGladiator.MakeAttack(attackedGladiator, out damage, fightStep);

            Console.ReadKey();
        }

        private Gladiator GetGladiator()
        {
            ShowRoster();

            int userInput = -1;

            while (IsGladiatorExist(userInput) == false)
            {
                userInput = UserUtils.GetUserInputInt();
            }

            return _roster[userInput];
        }
        
        private void ChooseGladiators(out Gladiator gladiator1, out Gladiator gladiator2)
        {
            Console.WriteLine("выберите гладиатора 1:");

            gladiator1 = GetGladiator();

            Console.WriteLine($"первый гладиатор: {gladiator1.Name}");
            Console.ReadKey();

            gladiator2 = gladiator1;

            Console.Clear();

            while (gladiator2 == gladiator1)
            {
                Console.WriteLine("выберите гладиатора 2:");

                gladiator2 = GetGladiator();

                if (gladiator2 == gladiator1)
                {
                    Console.WriteLine("Этот гладиатор уже на арене! Пожалуйста выберите другого.");
                    Console.ReadKey();
                }

                Console.Clear();
            }

            Console.WriteLine($"второй гладиатор: {gladiator2.Name}");
            Console.ReadKey();
        }

        private bool IsGladiatorExist(int userInput)
        {
            return userInput >= 0 && userInput < _roster.Count;
        }
    }

    class Gladiator
    {
        public Gladiator(string name, string description)
        {
            Name = name;
            Description = description;
        }

        public string Description { get; private set; }
        public string Name { get; protected set; }
        public int Health { get; protected set; } = 1000;
        public int MaxHealth { get; protected set; } = 1000;
        public int Mana { get; protected set; } = 0;
        public int MaxMana { get; protected set; } = 10;
        public int BasicDamage { get; protected set; } = 50;

        public virtual void MakeAttack(Gladiator attackedGladiator,out int damage, int step)
        {
            if (Health <= 0)
            {
                Console.WriteLine($"{Name} повержен, не может атаковать!");
                damage = 0;
            }
            else
            {
                float randomBonusDamage = BasicDamage * UserUtils.GenerateRandomFloat();
                damage = BasicDamage + Convert.ToInt32(randomBonusDamage);
            }

            damage *= ApplySkill(step);

            attackedGladiator.TakeDamage(damage);
        }

        public virtual void TakeDamage(int damage)
        {
            Health -= damage;
            Console.WriteLine($"Нанесено {damage} урона!");
        }

        public virtual int ApplySkill(int fightStep)
        {
            return 1;
        }

        public void ShowStats()
        {
            Console.WriteLine($"{Name}  hp: {Health}/{MaxHealth}\n\tmp: {Mana}/{MaxMana}");
        }
    }

    class RandomDoubleDamager : Gladiator
    {
        public RandomDoubleDamager(string name) : base(name, "имеет некий шанс нанести удвоенный урон") { }

        public override int ApplySkill(int fightStep)
        {
            int skillDamageModificator = 2;

            if (CanDoubleAttack())
            {
                Console.WriteLine("Удвоенный урон!");
                return skillDamageModificator;
            }
            else
            {
                return 1;
            }
        }

        private bool CanDoubleAttack()
        {
            float percentChanceRatio = 0.15f;
            float randomNumber = UserUtils.GenerateRandomFloat();

            return randomNumber < percentChanceRatio;
        }
    }

    class StableDoubleDamager : Gladiator
    {
        public StableDoubleDamager(string name) : base(name, "каждую третью свою атаку удвоенный урон ") { }

        public override int ApplySkill(int step)
        {
            int skillDamageModificator = 2;

            if (CanDoubleAttack(step))
            {
                Console.WriteLine("Удвоенный урон!");
                return skillDamageModificator;
            }
            else
            {
                return 1;
            }
        }

        private bool CanDoubleAttack(int fightStep)
        {
            int doubleDamageStep = 3;

            return fightStep % doubleDamageStep == 0;           
        }
    }

    class Monk : Gladiator
    {
        public Monk(string name) : base(name, "после накопления максимума маны использует лечение.") { }

        public override int ApplySkill(int step)
        {
            ReplenishMana();

            Heal();

            return 1;
        }

        private void ReplenishMana()
        {
            if(Mana < MaxMana)
            {
                Mana++;
            }
        }

        private void Heal()
        {
            if (Mana == MaxMana)
            {
                Console.WriteLine("Восполнение здоровья!");
                Health = MaxHealth;
                Mana = 0;
            }
        }
    }

    class Sorcerer : Gladiator
    {
        public Sorcerer(string name) : base(name, "пока маны достаточно применяет заклинание “Огненный шар”")
        {
            Mana = MaxMana;
        }

        public override int ApplySkill(int step)
        {
            int skillDamageModificator = 2;

            if (CanFireBallAttack())
            {
                Console.WriteLine("Атака огненным шаром!");
                return skillDamageModificator;
            }
            else
            {
                return 1;
            }
        }

        private bool CanFireBallAttack()
        {
            if (Mana > 0)
            {
                Mana--;
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    class Dodger : Gladiator
    {
        public Dodger(string name) : base(name, "имеет шанс уклониться, когда по нему наносят урон") { }

        public override void TakeDamage(int damage)
        {
            if (CanDodgeAttack())
            {
                Console.WriteLine($"{Name} смог увернуться от атаки!");
                damage = 0;
            }

            base.TakeDamage(damage);
        }

        private bool CanDodgeAttack()
        {
            float percentChanceRatio = 0.30f;
            float randomNumber = UserUtils.GenerateRandomFloat();

            if (randomNumber < percentChanceRatio)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    class UserUtils
    {
        private static Random s_random = new Random();

        public static float GenerateRandomFloat()
        {
            return s_random.NextSingle();
        }

        public static int GetUserInputInt()
        {
            bool isNumber = false;
            int parsedNumber = 0;

            while (isNumber == false)
            {
                string userInput = Console.ReadLine();
                isNumber = int.TryParse(userInput, out parsedNumber);

                if (isNumber == false)
                {
                    Console.WriteLine("Ошибка! Введите число");
                    Console.ReadKey(true);
                }
            }

            return parsedNumber;
        }
    }
}
