namespace OOP11_Aquarium;

public class Program
{
    static void Main(string[] args)
    {
        Owner owner = new Owner();
        owner.EngageAquarium();
    }
}

public class Fish
{
    private const int MaxCycleAge = 5;
    private bool _isAlive = true;
    private int _age;
    
    public Fish(int age, int id)
    {
        _age = age;
        Id = id;
    }

    public int Id { get; private set; }

    public void IncreaseAge()
    {
        _age++;

        if (_age == MaxCycleAge)
        {
            _isAlive = false;
        }
    }

    public void ShowInfo()
    {
        Console.WriteLine($"Рыбка {Id}: возраст {_age}.{GetLifeStatus()}");
    }

    private string GetLifeStatus()
    {
        return _isAlive ? "Жива" : "Умерла";
    }
}

public class Aquarium
{
    private List<Fish> _fishes = new List<Fish>();

    public Aquarium(int maxFishesCount)
    {
        MaxFishesCount = maxFishesCount;
    }

    public int MaxFishesCount { get; private set; }

    public int FishesCount => _fishes.Count;
    public List<Fish> Fishes => _fishes.ToList();

    public void ShowInfo()
    {
        Console.WriteLine("Аквариум:");

        if (_fishes.Count == 0)
        {
            Console.WriteLine("Аквариум пуст\n");
            return;
        }

        foreach (Fish fish in _fishes)
        {
            fish.ShowInfo();
        }
    }

    public void RemoveFish(Fish fish)
    {
        if (fish == null)
        {
            return;
        }
        
        _fishes.Remove(fish);
    }

    public void AddFish(Fish fish)
    {
        if (fish == null)
        {
            return;
        }
        
        _fishes.Add(fish);
    }
}

public class Owner
{
    private Aquarium _aquarium = new Aquarium(1);
    private bool _isWork = true;
    
    public void EngageAquarium()
    {
        while (_isWork)
        {
            _aquarium.ShowInfo();

            ManageAquarium();

            Console.ReadLine();
            Console.Clear();
        }
    }

    private void PutNewFishToAquarium()
    {
        if (_aquarium.FishesCount == _aquarium.MaxFishesCount)
        {
            Console.WriteLine("В аквариуме максимальное количество рыбок!");
            return;
        }

        Fish fish = new Fish(0, UniqueIdGenerator.GetNextId());

        _aquarium.AddFish(fish);
    }

    private Fish? ChooseFishInAquarium()
    {
        Console.WriteLine("Выберите индекс рыбки:");

        int userInput = UserUtils.GetUserInputInt();

        foreach (Fish fish in _aquarium.Fishes)
        {
            if (fish.Id == userInput)
            {
                return fish;
            }
        }
        
        return null;
    }

    private void TakeOutFishFromAquarium()
    {
        Fish? fish = ChooseFishInAquarium();

        if (fish == null)
        {
            Console.WriteLine("Такой рыбки нет.");
            return;
        }

        _aquarium.RemoveFish(fish);
    }

    private void PassTime()
    {
        foreach (Fish fish in _aquarium.Fishes)
        {
            fish.IncreaseAge();
        }
    }

    private void ManageAquarium()
    {
        const ConsoleKey PassTimeCommand = ConsoleKey.D;
        const ConsoleKey PutNewFishCommand = ConsoleKey.N;
        const ConsoleKey TakeFishCommand = ConsoleKey.T;
        const ConsoleKey ExitCommand = ConsoleKey.Escape;

        Console.WriteLine(
            $"введите команду:\n" +
            $"{PassTimeCommand} - подождать\n" +
            $"{PutNewFishCommand} - добавить новую рыбку в аквариум\n" +
            $"{TakeFishCommand} - вытащить рыбку из аквариума\n" +
            $"{ExitCommand} - выйти из программы");

        switch (Console.ReadKey().Key)
        {
            case PassTimeCommand:
                PassTime();
                break;

            case PutNewFishCommand:
                PutNewFishToAquarium();
                break;

            case TakeFishCommand:
                TakeOutFishFromAquarium();
                break;

            case ExitCommand:
                _isWork = false;
                break;
        }
    }
}

public static class UniqueIdGenerator
{
    private static int s_id;
    
    public static int GetNextId()
    {
        return s_id++;
    }
}

public static class UserUtils
{
    public static int GetUserInputInt()
    {
        int parsedNumber = 0;

        while (int.TryParse(Console.ReadLine(), out parsedNumber) == false)
        {
            Console.WriteLine("Ошибка! Введите число");
            Console.ReadKey(true);
        }

        return parsedNumber;
    }
}
