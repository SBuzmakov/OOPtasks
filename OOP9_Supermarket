using System;

namespace OOP9_Supermarket
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Supermarket supermarket = new Supermarket();

            supermarket.Work();
        }
    }

    class Supermarket
    {
        private int _revenue;
        private int _maxQueueSize = 5;
        private Queue<Buyer> _buyersQueue = new Queue<Buyer>();
        private List<Product> _assortment = new List<Product>();

        public Supermarket()
        {
            _assortment = new List<Product>() {new Product("сыр", 250), new Product("хлеб", 50), new Product("колбаса", 300),new Product("чай", 350), new Product("масло", 400) };
        }

        private bool HaveQueueBuyer => _buyersQueue.Count > 0;

        public void Work()
        {
            const ConsoleKey ServeCommand = ConsoleKey.Enter;
            const ConsoleKey FormQueueCommand = ConsoleKey.Q;
            const ConsoleKey ExitCommand = ConsoleKey.Escape;

            bool isWork = true;

            while (isWork)
            {
                Console.Clear();

                Console.WriteLine($"Прибыль магазина: {_revenue}\n");
                Console.WriteLine($"в данный момент в очереди {_buyersQueue.Count} человек\n");
                Console.WriteLine($"нажмите {ExitCommand} - для выхода\n {FormQueueCommand} - впустить очередь\n {ServeCommand} - обслужить покупателя");

                ConsoleKeyInfo charKey = Console.ReadKey();

                switch (charKey.Key)
                {
                    case ExitCommand:
                        isWork = false;
                        break;

                    case FormQueueCommand:
                        FormQueue();
                        break;

                    case ServeCommand:
                        Serve();
                        break;
                }
            }
        }

        private List<Product> GetAssortmentCopy()
        {
            return _assortment.ToList();
        }

        private void Serve()
        {
            if (HaveQueueBuyer)
            {
                Buyer buyer = _buyersQueue.Dequeue();

                MakeDeal(buyer);
            }
            else
            {
                Console.WriteLine("Отсутствует очередь покупателей");

                Console.ReadLine();
            }
        }

        private void MakeDeal(Buyer buyer)
        {
            int totalPrice = buyer.GetTotalPrice();

            buyer.Buy(totalPrice);

            AcceptPayment(totalPrice);

            ShowDealResult(totalPrice, buyer.PresentBag());
        }

        private void ShowDealResult(int totalPrice, List<Product> products)
        {
            if (totalPrice == 0)
            {
                Console.WriteLine("денег ни на что не хватило");               
            }
            else
            {
                Console.WriteLine($"Были проданы за {totalPrice}");

                foreach (Product product in products)
                {
                    Console.Write($"{product.Name} ");
                }
            }

            Console.ReadLine();
        }

        private void AcceptPayment(int cash)
        {
            _revenue += cash;
        }

        private void FormQueue()
        {
            int queueCount = _buyersQueue.Count;

            for (int i = 0; i < _maxQueueSize - queueCount; i++)
            {
                Buyer buyer = new Buyer(GetAssortmentCopy());

                _buyersQueue.Enqueue(buyer);
            }
        }
    }

    class Buyer
    {
        private Bag _bag = new Bag();
        private Bag _basket = new Bag();

        public Buyer(List<Product> assortment)
        {
            Cash = UserUtils.GenerateRandomNumber(0, 2000);

            _basket = FillBasket(assortment);
        }

        public int Cash {  get; private set; }

        public List<Product> PresentBag()
        {
            return _bag.GetProductsList();
        }

        public void TakeProduct(Product product)
        {
            _bag.PutProduct(product);
        }

        public int GetTotalPrice()
        {
            bool isDealMade = false;

            int totalPrice = 0;

            while (isDealMade == false)
            {
                totalPrice = _basket.GetBasketPrice();

                if (CanPay())
                {
                    isDealMade = true;
                }
                else
                {
                    if (_basket.GetProductsList().Count > 0)
                    {
                        RemoveRandomProduct();
                    }
                }
            }

            return totalPrice;
        }

        public void Buy(int totalPrice)
        {
            Pay(totalPrice);

            FillBag();
        }

        private bool CanPay()
        {
            return Cash >= _basket.GetBasketPrice();
        }

        private void RemoveRandomProduct()
        {
            Product product =_basket.GetProduct(UserUtils.GenerateRandomNumber(0, _basket.GetProductsList().Count));

            _basket.RemoveProduct(product);
        }

        private void Pay(int totalPrice)
        {
            Cash -= totalPrice;
        }

        private void FillBag()
        {
            foreach (Product product in _basket.GetProductsList())
            {
                TakeProduct(product);

                _basket.RemoveProduct(product);
            }
        }

        private Bag FillBasket(List<Product> products)
        {
            Bag bag = new Bag();

            for (int i = 0; i< bag.Capacity; i++)
            {
                bag.PutProduct(products[UserUtils.GenerateRandomNumber(0, products.Count)]);
            }

            return bag;
        }
    }

    class Bag
    {
        private List<Product> _products = new List<Product>();

        public int Capacity { get; private set; } = 10;

        public void PutProduct(Product product)
        {
            _products.Add(product);
        }

        public Product GetProduct(int index)
        {
            return _products[index];
        }

        public List<Product> GetProductsList()
        {
            return _products.ToList();
        }

        public void RemoveProduct(Product product)
        {
            _products.Remove(product);
        }

        public int GetBasketPrice()
        {
            int totalPrice = 0;

            foreach (Product product in _products)
            {
                totalPrice += product.Price;
            }

            return totalPrice;
        }
    }

    class Product
    {
        public Product(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; private set; }
        public int Price { get; private set; }
    }

    class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomNumber(int min, int max)
        {
            return s_random.Next(min, max);
        }
    }
}
